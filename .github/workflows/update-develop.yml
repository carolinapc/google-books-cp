# Update develop branch from master every time a push is done in master branch
name: Job - Update Develop Branch
on:
  push:
    branches:
      - master

permissions: write-all


env:
  # branch to be updated with changes from master
  BRANCH_TO_UPDATE: develop
  # name of merge branch to be created
  MERGE_BRANCH: merge-branch-${{ github.run_id }}
  # message to alert via slack (if it's none, no alert will be sent)
  SLACK_MESSAGE: default
  SLACK_MESSAGE_TITLE: default
  SLACK_MESSAGE_FOOTER: '<{run_url}|View Job>'
  WORKFLOW_STATUS: success

jobs:
  update-develop:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Info
        run: |
            echo Branch updated: $(basename ${{ github.ref }})
            echo Branch to be updated: ${{ env.BRANCH_TO_UPDATE }}


      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Configure credentials
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "Github Actions"

      - name: Create merge branch from ${{ github.ref }}
        id: create-branch
        run: |
          git checkout -b ${{ env.MERGE_BRANCH }}
          git status

      - name: Update new branch from ${{ env.BRANCH_TO_UPDATE }}
        id: update-merge-branch
        run: |
          # set to ignore errors
          set +e
          fileToIgnore=test-file.txt
          CONFLICTS_TO_SOLVE=false

          git merge origin/${{ env.BRANCH_TO_UPDATE }}

          # in case of errors, likely conflicted files
          if [ $? -ne 0 ]; then
            # check how many files has conflicts 
            totalConflicted=$(git status --short | grep "^UU" | wc -l)

            # check whether the ignored file had conflict
            ignoredfileHasConflict=$(git status --short | grep "^UU $fileToIgnore" | wc -l)

            # if the conflict was only the ignored file, solve it.
            if [[ $totalConflicted == 1 && $ignoredfileHasConflict == 1 ]]; then
                echo "Only ${fileToIgnore} got conflicts, so kept theirs (what it is in ${{ env.BRANCH_TO_UPDATE }} branch) to solve it."
                git checkout --theirs $fileToIgnore
                git add $fileToIgnore
                git commit -m "merge-bot: Fix conflict in ${fileToIgnore} file by choosing the file in ${{ env.BRANCH_TO_UPDATE }} branch"
            else
                # set to stop on errors
                set -e
                CONFLICTS_TO_SOLVE=true

                echo "Couldn't solve conflicts automatically. Merge from ${{ github.ref}} was aborted to be manually solved in the branch ${{ env.MERGE_BRANCH }}."
                git merge --abort
            fi
          fi

          echo "CONFLICTS_TO_SOLVE=${CONFLICTS_TO_SOLVE}" >> "$GITHUB_OUTPUT"

      - name: Push changes to merge branch
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ env.MERGE_BRANCH }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pull request
        id: create-pr
        run: |
          RESPONSE=$( curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{"title": "merge-bot: Porting hotfixes from master", "head": "${{ env.MERGE_BRANCH }}", "base": "${{ env.BRANCH_TO_UPDATE }}", "body": "This pull request updates ${{ env.BRANCH_TO_UPDATE }} branch with changes from master branch."}' )
          
          PR_NUMBER=$(echo $RESPONSE | jq -r '.number')
          PR_URL="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"

          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "PR_URL=$PR_URL" >> "$GITHUB_OUTPUT"
          
          echo $RESPONSE
          echo "PR NUMBER is $PR_NUMBER"
          echo "PR URL is $PR_URL"

          if [[ -z "$PR_NUMBER" || $PR_NUMBER == "null" ]]; then
            echo "PR_NUMBER is empty. Likely an issue with the request to create the PR. Please check the response."
            exit 1;
          fi

      - name: Approve pull request automatically if there is no conflicts
        if: ${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE == 'false' }}
        run: |
          RESPONSE=$( curl -X POST \
            -H "Authorization: Bearer ${{ secrets.CAROL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.create-pr.outputs.PR_NUMBER }}/reviews \
            -d '{"event": "APPROVE"}' )

          STATE=$(echo $RESPONSE | jq -r '.state')
          echo $RESPONSE
          echo PR review state is $STATE

          if [[ -z "$STATE" || $STATE == "null" ]]; then
            echo "STATE is empty. Likely an issue with the request to approve the PR. Please check the response."
            exit 1;
          fi

      - name: Add label to the pull request to set merge method (merge commit)
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: merge-method:merge
          github_token: ${{ secrets.CAROL_ACCESS_TOKEN }}
          number: ${{ steps.create-pr.outputs.PR_NUMBER }}

      - name: Add label to the pull request to start merging process if there is no conflicts
        if: ${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE == 'false' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: command:queue-for-merging
          github_token: ${{ secrets.CAROL_ACCESS_TOKEN }}
          number: ${{ steps.create-pr.outputs.PR_NUMBER }}

      - name: Build message to notify conflicts
        if: ${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE == 'true' }}
        run: |
          PR_NUMBER=${{ steps.create-pr.outputs.PR_NUMBER }}
          PR_URL=${{ steps.create-pr.outputs.PR_URL }}

          MESSAGE="There are conflicts in merge branch \`${{ env.MERGE_BRANCH }}\`, and the pull request number \`${PR_NUMBER}\` was created but can not be automatically merged into \`${{ env.BRANCH_TO_UPDATE }}\` branch."
          MESSAGE="${MESSAGE} Please *solve the conflicts*, and follow the manual process to merge the PR."
          
          echo "SLACK_MESSAGE=${MESSAGE}" >> "$GITHUB_ENV"
          echo "SLACK_MESSAGE_TITLE=*Workflow Requires Attention*" >> "$GITHUB_ENV"
          echo "WORKFLOW_STATUS=warnings" >> "$GITHUB_ENV"
          echo "SLACK_MESSAGE_FOOTER=${{ env.SLACK_MESSAGE_FOOTER }} | <${PR_URL}|View PR ${PR_NUMBER}>" >> "$GITHUB_ENV"

      - name: Build message to notify success
        if: ${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE == 'false' }}
        run: |
          PR_NUMBER=${{ steps.create-pr.outputs.PR_NUMBER }}
          PR_URL=${{ steps.create-pr.outputs.PR_URL }}
          
          MESSAGE="Pull request was created to update develop branch with hotfixes from master branch."
          
          echo "SLACK_MESSAGE=${MESSAGE}" >> "$GITHUB_ENV"
          echo "SLACK_MESSAGE_TITLE=*Workflow Succeeded*" >> "$GITHUB_ENV"
          echo "SLACK_MESSAGE_FOOTER=${{ env.SLACK_MESSAGE_FOOTER }} | <${PR_URL}|View PR ${PR_NUMBER}>" >> "$GITHUB_ENV"

      - name: Build message to notify unknown errors
        if: failure()
        run: |
          MESSAGE="There are errors in the workflow. Please check logs for more details."
          echo "SLACK_MESSAGE=${MESSAGE}" >> "$GITHUB_ENV"
          echo "SLACK_MESSAGE_TITLE=*Workflow Failure* - Unknown Error" >> "$GITHUB_ENV"
          echo "WORKFLOW_STATUS=failure" >> "$GITHUB_ENV"

      - name: Notify result via slack
        if: always()
        id: slack
        run: |
          echo "notification_title: '${{ env.SLACK_MESSAGE_TITLE }}'"
          echo "footer: '${{ env.SLACK_MESSAGE_FOOTER }}'"
          echo "status: ${{ env.WORKFLOW_STATUS }} "
          echo "message_format: {emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>. \n${{ env.SLACK_MESSAGE }}"
          echo "notify_when: 'success,failure,warnings'"
          echo "mention_users: 'U0289C8E3FE,U4L1NS68K'"
          echo "mention_users_when: 'failure,warnings'"
          echo "icon_warnings: ':warning:'"
        
        # documentation for this action: https://github.com/ravsamhq/notify-slack-action/tree/v2/
        # uses: ravsamhq/notify-slack-action@v2
        # with:
        #   notification_title: '${{ env.SLACK_MESSAGE_TITLE }}'
        #   footer: '${{ env.SLACK_MESSAGE_FOOTER }}'
        #   status: ${{ env.WORKFLOW_STATUS }} # required - not using job.status as there are custom warnings
        #   message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>. \n${{ env.SLACK_MESSAGE }}"
        #   notify_when: 'success,failure,warnings'
        #   # Carol and Micael will be mentioned in case of failure and warnings
        #   mention_users: 'U0289C8E3FE,U4L1NS68K'
        #   mention_users_when: 'failure,warnings'
        #   icon_warnings: ':warning:'
        # env:
        #   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required 
          
